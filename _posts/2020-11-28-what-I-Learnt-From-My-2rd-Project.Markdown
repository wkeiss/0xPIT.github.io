---
title: "What I Learned from Building My Second Project"
layout: post
date: 2020-11-28
tag:
- "2020"
- "blog"
- "growth"
- ”work"
blog: true
---

写篇文章之前，为了让我能够更加顺畅地完成，我翻看每天的笔记来回顾自己做第二个项目的过程，这没有让我更顺畅的完成，反而让我更加拖延，甚至不想坐在电脑前，因为一个几乎对技术的世界没有足够背景知识的人，去进入到这个世界里，并且还想要通过代码在做点什么，这是一件很困难的事情，所有自己的期望背后，都需要有很多个吃瘪的时刻。

不长的编程经历中，我学习到要完成一个项目，一个作品必然是会遇到很头疼的事情，尤其是我们的终端报了一堆密密麻麻看都看不懂的 Bug 的时候，很让人沮丧。学习过程中的每一个挫折都需要我们耐下心来去仔细剖析是我们哪里不会了，有哪些知识是我们还没有掌握但是可以帮助我们解决问题的，而这些知识点背后可能又开始串着很多我们所不知道的知识点。而能给我们提供动力的，就是兴趣了。所以在学习编程的时候，我特别喜欢根据做项目来学习，而且是挑那种自己特别心心念念的项目来完成。

我一直希望有一个地方可以像博客一样，可以用来发布自己碎片化的想法，一些感悟。这些碎片化的东西不足以成为一篇文章，但是毕竟是自己一点一滴走人生之路明白的，公开出来，遇到有缘人能够对 TA 有所启发，那是一种还不错的事情。而且我也需要有这种知道会被人看见的环境来约束自己更清楚地记录自己所思。而微博，微信，Twitter 等上面充斥着各种各样的信息流来抓取人们的注意力，还是用来娱乐吧，思考的东西还是放在另外一个安静的地方。这个需求总是在自己心间盘绕，而我此时正好需要一个项目来推进我的学习，让我理解更多关于互联网，如何创建一个应用的内容。

一开始我就从我会的部分着手，那就是用 HTML 、CSS 和 JavaScript 实现前端的页面布局，还有一些动态的效果。这一次没有典型的页面设计了，所以真真正正地全是我干。对于一个不是确切知道自己想要什么的人来说，要在一张空白的 HTML 上添加内容并不是一件很容易的事情。我一开始列出来自己的需求：

1. 可以像微博或 Twitter 一样发布自己的碎片化想法。也就是有一个输入框，提交后会在页面上直接展示自己的内容。下次访问页面的时候还是可以看到上一次关闭页面前添加的内容。
2. 输入框支持 Markdown 语法。
3. 可以有搜索功能。
4. 如果有余力，可以在页面右侧添加一个时间轴。这样点击相应的时间轴就可以跳到相应的年份/月份看当月的记录。
5. 若还有余力，还要看看能不能解决添加照片等多媒体的功能。

我自己是只是到自己是差的，于是当然在想页面布局的时候很快就自动 3 和 4 这两项有余力的项目，只考虑前面两个。那按照老样式，大概就是一个页面，顶部标题 `<h1>Lonely Island</h1>` , 标题这行的另外一侧放一个 🔍 图标, 点击图出现输入框来做搜索框用。最下面的主要区域就是用来做主要功能：输入框输入文本内容，下面展示发表内容。

想得容易，真正做的时候也没有那么难，但就是心里会有杂念啊，总想着扣很多的细节，试图想要做个艺术品出来，比如标题大小啊，字体啊，页面背景颜色要什么啊，然后输入框的边框线大小啊，颜色啊，还有是不是右下角添加一个箭头实现点击它回到顶部啊，反正就是希望做艺术品，需要它高级，体验好。然后折腾几下 CSS 之后，我不得不认命，哎，我只是知道一个东西好看不好看，可我并没有那种艺术能力能够知道如何配色，选择什么字体，边框要如何才能实现让我惊艳的效果。而且是做给自己的，自己不嫌弃就行，页面设计再怎么高级如果我还没有实现我的需要的可以发布想法的功能，那能有什么用。接受了现实之后才停止那种使劲儿扣细节的状态，继续到主要功能，到底要如何才能实现我添加文本后，在输入框下面就能有显示自己刚刚发布的内容，而且下一次打开页面的时候还能看的见呢？

因为学习过 JavaScript 和 DOM API， 所以很自然地想到使用 JavaScript 和 DOM API 将文本框的内容添加到页面下，可是却刷新页面之后，这些新添的内容就会消失，这该怎么办呢？HTML ， CSS 和 JavaScript 这些都是依赖于浏览器才能实现效果的，它们属于用户的技术。HTML 是用来标记网页内容的， CSS 是用来实现装扮内容的，比如添加背景颜色，改变网页元素布局的， JavaScript 结合 DOM API，可以实现用代码操控元素，比如实现用户点击一个按钮，出现弹窗，也可以用来检验用户填写表单的时候是否按要求的格式填写信息等。这些用户端的技术没有一个是涉及数据处理的。那一个网页，除了有前端外，还有服务器端。服务器端有服务器和数据库，服务器就是负责处理和响应用户端的请求，数据库是用来存储网站的数据的。

在看了两遍 MDN 上关于服务器端的介绍后，我终于知道我需要借助于服务器端的框架来帮我处理请求和数据的。里面列举了好几个框架，无论哪一个框架我都不明白。那就选择一个它说对初学者友好的框架，并且框架语言是 Python( 因为我学过），那就是 Django 框架了。选择它不选择 Flask 是因为在求职网站的职位描述上经常看见它。虽然 MDN 上面有教程，但是秉着最好要直接从官方文档开始的原则，我坚定地转去了 Django 的官网寻找他们的文档来试图知道该如何才能实现我想要的 Post 的功能。结果，根本没看懂人家文档写的是个啥。直接搜相关功能 + Django 的教程也都没有看懂，因为即便是实现我需要的功能。可人家还是用的是 Django 来实现的啊。于是想着既然啥都不懂，那我就直接跟着 Django 教程来学先，可是跟着粘贴代码，复制命令到命令行执行一通，我还是不能明白自己在干个啥。想到 MDN 上有教程，于是又回去看了看教程，似乎能看懂，于是就跟着敲代码了。直到敲到了 2 个章节后，我才明白之前原来不懂的东西其实是在用代码写 admin 页面，写后台数据的表格来规定每一行代表什么数据，应该是什么格式的。这个不懂到顿悟的经历，让我明白了为什么既然官方文档的信息源更加靠谱可靠，为什么还有人不用官方文档，因为有些官方文档默认你已经拥有的某些背景知识，而对于没有这方面知识的人来理解就会很困难，而另外一些非官方文档会更加容易理解，是因为他们解释的时候会把那些隐藏的知识点尽可能都解释清楚，对新手比较友好。而人类的大脑天生就喜爱这些简单的，认知资源负担没有那么重的内容，所以人遇到困难的时候，更习惯找非官方文档。另一方面知道每一节的内容如果孤立去学习会比较难理解，因为 Django 的功能是相互交织的，你要在一个它整个设计中去理解其中的某一个模块才会对这个模块有了解。所以后面几章我学习的速度要比前面三章的要快，不会停在那里磨自己不清楚的地方，主要搞清楚每章节要讲的主要内容是什么就好，要奔着自己最快的速度扫过每一个章节形成全局认识。然后根据自己所了解的，边实现自己的功能边深度学习具体的知识点。

后面确实云里雾里对 Django 的整个设计有一个模糊的认识，比如知道一个 Django 项目下，分为不同的 Application。 比如微信这个应用项目，这个网站里面包含有不同的应用，每一个应用实现不同的功能，比如有聊天功能，朋友圈功能，公众号功能。而每一个 Application 里面都主要包含有 model.py, url.py，views.py 三个文件。model 是用来搞定你需要保存的数据名称，类型的。比如我的Lonely Island 这个项目，我需要新建的数据就是 post, 然后它应该是 TextFiled 类型的。而 view.py 这个文件就是结合它提供的与后台数据交互的 API， 来获取数据的。比如我们的后台存储了我们所有发布的所有内容，那现在我需要提取这些内容去将它放在相应的 template(在我的项目里就是我之前做的 HTML 文件)展示，这些任务通常用一个函数来写。而 url 呢，就是用来管理 http 请求的，它会根据请求的 url 指引 Django 去执行 view 文件下的某一个函数。 理解这些我很快就写出了一个函数来让我的网页能够展示数据库里面保存的全部内容了。但是，但是，我还是没有完成自己最最需要的功能，那就是提交内容后会展示出来自己的内容......

我知道自己总是在之前成功的边缘徘徊，怎么都不到自己想要的点，但是至少自己理解了 Django 的骨架了，就有点像新到一个地方后，我的脑海里有这个地方大致的地图了，那要去某一个目的地，我自己脑子里是可以大概勾勒出路线的。那之前在 MDN 的教程中一顿囫囵吞枣后，我知道 Django Form 就是用来帮助我直接像数据库写数据的。然后打开官方相应的文档，结合 Google 搜出用 Django Form 实现类似我需求的教程，最后就依葫芦画瓢，就添加简单的几行代码，就再修改 view 的函数 和 template ，就能够实现我想要的功能了。哎呀呀呀，把最最核心的功能实现了，高兴得不得了，当下就发一条 post 来表示我的激动之情。原本不打算添加登录功能的，但是因为想到目前要是我的网站发布的话，那所有网站都访客都可以输入并发布内容。于是只好根据是不是 User 来决定文本框是否显示。所以添加了登录和登出功能。

后面就想着到部署我的网站了。没想到我又是在几乎成功的边缘上..... MDN 的教程上使用的是 Heroku, 但是我试了十几次了，我都登录不上。另外我准备打算转去 AWS, 呜呜，官方文档的教程我也还是看不懂。最终放弃转去 Pythonanywhere, 一顿捣腾，结果卡在了一个不明所以的 Bug 上。最终考虑到能够长期使用的问题上，再加上可以不借住梯子就可以部署的需求，我打算再看看国内的服务器。但是我到写文章的此刻还没有试。

由于有第一次的项目，让我知道平时使用网站的每一个称手的功能背后需要写代码的人付出很多的心血，所以这次并没有那种觉得发布一条简单内容背后需要学习这么多东西的想法，而且 Django 确实给力，基本上就是几行代码的事情就能够实现我这很简单的需求。第二次的项目有很特别的意义，这是第一次我真的完完全全按照自己的想法去构建一个可以交互的应用来解决问题，这是我一直想做的事情，也是自己学代码的最原始的动力。我希望未来可以解决更多的问题，更大的问题。另外过程中有很多时候都在催着自己快点，时间的紧迫难免会给自己带来压力，可是这样的压力又可以让自己去关注那些最重要最核心的东西，不会让自己在边缘的东西上浪费更多的时间，而且解决核心的问题，会反过来更激励自己继续攻克一个又一个难题。

Lonely Island 仓库地址： https://github.com/wkeiss/lonelyisland

